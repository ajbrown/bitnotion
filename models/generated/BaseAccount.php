<?php

/**
 * BaseAccount
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property string $username
 * @property string $password
 * @property string $emailAddress
 * @property boolean $enabled
 * @property boolean $confirmed
 * @property string $type
 * @property Doctrine_Collection $Login
 * @property Doctrine_Collection $AccountConfirm
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5318 2008-12-19 20:44:54Z jwage $
 */
abstract class BaseAccount extends Doctrine_Record
{
  public function setTableDefinition()
  {
    $this->setTableName('accounts');
    $this->hasColumn('username', 'string', 16, array('type' => 'string', 'fixed' => 1, 'notnull' => true, 'length' => '16'));
    $this->hasColumn('password', 'string', 32, array('type' => 'string', 'fixed' => 1, 'notnull' => true, 'length' => '32'));
    $this->hasColumn('emailAddress', 'string', 64, array('type' => 'string', 'fixed' => 1, 'notnull' => true, 'length' => '64'));
    $this->hasColumn('enabled', 'boolean', 25, array('default' => '1', 'notnull' => true, 'type' => 'boolean', 'length' => '25'));
    $this->hasColumn('confirmed', 'boolean', null, array('default' => 0, 'notnull' => true, 'type' => 'boolean'));
    $this->hasColumn('type', 'string', 255, array('type' => 'string', 'length' => 255));

    $this->index('username_index', array('fields' => array(0 => 'username'), 'type' => 'unique'));
    $this->index('email_index', array('fields' => array(0 => 'emailaddress')));
    $this->setSubClasses(array('Buyer' => array('type' => '1'), 'Seller' => array('type' => '2')));
  }

  public function setUp()
  {
    $this->hasMany('AccountLogin as Login', array('local' => 'id',
                                                  'foreign' => 'accountId'));

    $this->hasMany('AccountConfirm', array('local' => 'emailAddress',
                                           'foreign' => 'emailAddress'));

    $timestampable0 = new Doctrine_Template_Timestampable();
    $this->actAs($timestampable0);
  }
}